import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from database import (
    add_subscriber,
    get_subscribers,
    get_new_listings,
    db_setup,
    get_connection,
)


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe
@dp.message(Command("subscribe"))
async def subscribe_handler(message: types.Message):
    chat_id = message.chat.id
    add_subscriber(chat_id)
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gazwpol
@dp.message(Command("gazwpol"))
async def gazwpol_handler(message: types.Message):
    listings = get_new_listings()
    if listings:
        for listing_id, title, url in listings:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            with get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT price, location_date, category, delivery_cost FROM listings WHERE id = ?', (listing_id,))
                data = cursor.fetchone()

            if data:
                price, location_date, category, delivery_cost = data
                delivery_text = f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –í—Ä–æ—Ü–ª–∞–≤: {int(delivery_cost)} PLN" if delivery_cost else "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞"
            else:
                price, location_date, category, delivery_text = "–ù–µ —É–∫–∞–∑–∞–Ω–∞", "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                f"üì¢ *–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!*\n"
                f"üöó *{title}*\n"
                f"üí∞ *–¶–µ–Ω–∞:* {price}\n"
                f"üìç *–ì–æ—Ä–æ–¥:* {location_date}\n"
                f"üè∑Ô∏è *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* {category}\n"
                f"{delivery_text}\n"
                f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({url})"
            )

            await message.answer(message_text, parse_mode="Markdown")
    else:
        await message.answer("üöÄ –ü–æ–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
async def notify_subscribers():
    while True:
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        subscribers = get_subscribers()
        listings = get_new_listings()
        for chat_id in subscribers:
            for listing_id, title, url in listings:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                with get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute('SELECT price, location_date, category, delivery_cost FROM listings WHERE id = ?', (listing_id,))
                    data = cursor.fetchone()

                if data:
                    price, location_date, category, delivery_cost = data
                    delivery_text = f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –í—Ä–æ—Ü–ª–∞–≤: {delivery_cost} PLN" if delivery_cost else "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞"
                else:
                    price, location_date, category, delivery_text = "–ù–µ —É–∫–∞–∑–∞–Ω–∞", "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = (
                    f"üì¢ *–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!*\n"
                    f"üöó *{title}*\n"
                    f"üí∞ *–¶–µ–Ω–∞:* {price}\n"
                    f"üìç *–ì–æ—Ä–æ–¥:* {location_date}\n"
                    f"üè∑Ô∏è *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* {category}\n"
                    f"{delivery_text}\n"
                    f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({url})"
                )

                await bot.send_message(chat_id, message_text, parse_mode="Markdown")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    db_setup()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    asyncio.create_task(notify_subscribers())  # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
